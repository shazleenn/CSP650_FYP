package com.example.ezklia;

import android.annotation.SuppressLint;
import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.Service;
import android.content.Intent;
import android.os.Build;
import android.os.IBinder;
import android.util.Log;

import androidx.annotation.Nullable;
import androidx.core.app.NotificationCompat;

import org.altbeacon.beacon.Beacon;
import org.altbeacon.beacon.BeaconConsumer;
import org.altbeacon.beacon.BeaconManager;
import org.altbeacon.beacon.BeaconParser;
import org.altbeacon.beacon.RangeNotifier;
import org.altbeacon.beacon.Region;
import org.altbeacon.beacon.Identifier;

import java.util.Collection;

public class BeaconScanningService extends Service implements BeaconConsumer {

    private static final String CHANNEL_ID = "BeaconScanningChannel";
    private BeaconManager beaconManager;
    private static final String TAG = "BeaconScanningService";

    @SuppressLint("ForegroundServiceType")
    @Override
    public void onCreate() {
        super.onCreate();
        createNotificationChannel();
        Notification notification = new NotificationCompat.Builder(this, CHANNEL_ID)
                .setContentTitle("Beacon Scanning")
                .setContentText("Scanning for beacons in the background")
                .setSmallIcon(R.drawable.ic_launcher_background) // Ensure you have an icon with this name
                .build();
        startForeground(1, notification);

        beaconManager = BeaconManager.getInstanceForApplication(this);
        beaconManager.getBeaconParsers().clear();
        beaconManager.getBeaconParsers().add(new BeaconParser().setBeaconLayout("s:0-1=feaa,m:2-2=00,p:3-3:-41,i:4-13,i:14-19"));
        beaconManager.bind(this);
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        Log.d(TAG, "onStartCommand: Service started");
        return START_STICKY;
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        if (beaconManager != null) {
            beaconManager.unbind(this);
        }
    }

    @Nullable
    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    @Override
    public void onBeaconServiceConnect() {
        Log.d(TAG, "Beacon service connected");

        beaconManager.addRangeNotifier(new RangeNotifier() {
            @Override
            public void didRangeBeaconsInRegion(Collection<Beacon> beacons, Region region) {
                Log.d(TAG, "Ranging beacons in region: " + region);
                if (beacons.size() > 0) {
                    for (Beacon beacon : beacons) {
                        String namespace = beacon.getId1().toString();
                        String instance = beacon.getId2().toString();
                        String beaconInfo = "Beacon detected: Namespace = " + namespace + ", Instance = " + instance + ", RSSI = " + beacon.getRssi();
                        Log.d(TAG, beaconInfo);
                    }
                } else {
                    Log.d(TAG, "No beacons detected");
                }
            }
        });

        try {
            // Define a region with specific criteria to filter beacons
            String namespaceId = "edd1ebeac04e5defa017"; // Replace with actual namespace ID
            String instanceId = "f1e83900106d"; // Replace with actual instance ID

            Region region = new Region("myRangingUniqueId", Identifier.parse(namespaceId), Identifier.parse(instanceId), null);
            beaconManager.startRangingBeacons(region);
            Log.d(TAG, "Started ranging beacons in region: " + region);
        } catch (Exception e) {
            Log.e(TAG, "Cannot start ranging", e);
        }
    }

    private void createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            NotificationChannel serviceChannel = new NotificationChannel(
                    CHANNEL_ID,
                    "Beacon Scanning Service Channel",
                    NotificationManager.IMPORTANCE_DEFAULT
            );
            NotificationManager manager = getSystemService(NotificationManager.class);
            manager.createNotificationChannel(serviceChannel);
        }
    }
}
